# # name: Flask App Tests

# # #The workflow will run every time when a 
# # #pull request is made on main branch 

# # on:
# #     pull_request:
# #         branches:
# #             - main

# # jobs:
# #     test:
# #         runs-on: ubuntu-latest
# #         defaults:
# #             run:
# #                 working-directory: ./app/
# #         strategy:
# #             matrix:
# #                 python-version: [3.13.1]
# #         env:
# #             MODE: ${{ secrets.MODE }}

# #         steps:
# #             - uses: actions/checkout@v3 # Predefined scripts 
            
# #             - name: Set up Python
# #               uses: actions/setup-python@v4
# #               with:
# #                 python-version: ${{ matrix.python-version }} # Is taking versions defined in 'matrix' in 'strategy' step

# #             - name: Install dependencies
# #               run: |
# #                 python -m pip install --upgrade pip
# #                 pip install -r ../requirements.txt
                
# #             - name: Test App Code
# #               run: python ./main_test.py

# name: Publikacja pakietu

# on:
#   push:
#     branches:
#       - test

# jobs:

# #   test:
# #     runs-on: ubuntu-latest
# #     steps:
# #     - uses: actions/checkout@v3
    
# #     - name: Konfiguracja Pythona
# #       uses: actions/setup-python@v4
# #       with:
# #         python-version: '3.10'
    
# #     - name: Instalacja zależności
# #       run: |
# #         python -m pip install --upgrade pip
# #         pip install -r ../requirements.txt
    
# #     - name: Testowanie
# #       run: python -m unittest discover -s ../tests -p '*_test.py'

#   deploy:
#     runs-on: ubuntu-latest
#     # Dodaj uprawnienia
#     permissions:
#         contents: read
#         packages: write
#     steps:
#     - uses: actions/checkout@v3
    
#     - name: Konfiguracja Pythona
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.10'
    
#     - name: Instalacja Poetry
#       run: |
#         curl -sSL https://install.python-poetry.org | python3 -
#         echo "$HOME/.local/bin" >> $GITHUB_PATH
      
#     - name: Konfiguracja Poetry
#       run: |
#         poetry config virtualenvs.create false    

#     - name: Instalacja zależności
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r ./requirements.txt
#         pip install tomli
#         pip install build twine
    
#     - name: Wersjonowanie pakietu binarnego
#       id: get_version
#       run: |

#         VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['tool']['poetry']['version'])")
#         echo "Znaleziona wersja: $VERSION"

#         echo "version=$VERSION" >> $GITHUB_OUTPUT

#     - name: Budowanie pakietu
#       run: python -m build
#     # - name: Publikacja do PyPI
#     #   uses: pypa/gh-action-pypi-publish@release/v1
#     #   with:
#     #     password: ${{ secrets.PYPI_API_TOKEN }}

#     - name: Publikacja do GitHub Packages
#       run: |
#         # Użyj poprawnego URL GitHub Packages
#         poetry config repositories.github https://pypi.pkg.github.com/${{ github.repository_owner }}
#         # Użyj GITHUB_TOKEN z właściwymi uprawnieniami
#         poetry config http-basic.github ${{ github.repository_owner }} ${{ secrets.PACKAGES_TOKEN}}
#         # Publikacja pakietu
#         poetry publish -r github
    
#     # - name: Publikacja do GitHub Packages
#     #   run: twine upload --repository github dist/*
#     #
        
#     - name: Zapisz pliki dystrybucyjne jako artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: dist-files-v${{ steps.get_version.outputs.version }}
#         path: dist/
#         retention-days: 90



name: Publikacja pakietu

on:
  push:
    branches:
      - test

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v3
    
    - name: Konfiguracja Pythona
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Instalacja Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      
    - name: Konfiguracja Poetry
      run: |
        poetry config virtualenvs.create false
    
    - name: Instalacja zależności
      run: |
        poetry install --no-interaction
    
    - name: Wersjonowanie pakietu
      id: get_version
      run: |
        VERSION=$(poetry version -s)
        echo "Znaleziona wersja: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Budowanie pakietu
      run: |
        poetry build
    
    # - name: Publikacja do PyPI
    #   run: |
    #     poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
    #     poetry publish
    
    - name: Publikacja do GitHub Packages
      run: |
        # Użyj poprawnego URL GitHub Packages
        poetry config repositories.github https://pypi.pkg.github.com/${{ github.repository_owner }}
        # Użyj GITHUB_TOKEN z właściwymi uprawnieniami
        poetry config http-basic.github ${{ github.repository_owner }} ${{ secrets.PACKAGES_TOKEN }}
        # Publikacja pakietu
        poetry publish -r github
    
    - name: Zapisz pliki dystrybucyjne jako artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files-v${{ steps.get_version.outputs.version }}
        path: dist/
        retention-days: 90